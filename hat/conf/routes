
# USER Routes
GET           /users/user                                          org.hatdex.hat.api.controllers.Users.listUsers
POST          /users/user                                          org.hatdex.hat.api.controllers.Users.createUser
GET           /publickey                                           org.hatdex.hat.api.controllers.Authentication.publicKey
GET           /users/access_token/validate                         org.hatdex.hat.api.controllers.Authentication.validateToken
GET           /users/application_token                             org.hatdex.hat.api.controllers.Authentication.applicationToken(name: String, resource: String)
GET           /users/access_token                                  org.hatdex.hat.api.controllers.Authentication.accessToken
PUT           /users/user/:userId/enable                           org.hatdex.hat.api.controllers.Users.enableUser(userId: java.util.UUID)
PUT           /users/user/:userId/disable                          org.hatdex.hat.api.controllers.Users.disableUser(userId: java.util.UUID)
PUT           /users/user/:userId/delete                           org.hatdex.hat.api.controllers.Users.deleteUser(userId: java.util.UUID)
PUT           /users/user/:userId/update                           org.hatdex.hat.api.controllers.Users.updateUser(userId: java.util.UUID)

# DATA Routes
GET           /data/sources                                        org.hatdex.hat.api.controllers.Data.getDataSources

POST          /data/table                                          org.hatdex.hat.api.controllers.Data.createTable
POST          /data/table/:parentId/table/:childId                 org.hatdex.hat.api.controllers.Data.linkTables(parentId: Int, childId: Int)
GET           /data/table/:tableId                                 org.hatdex.hat.api.controllers.Data.getTable(tableId: Int)
GET           /data/table                                          org.hatdex.hat.api.controllers.Data.findTable(name: Option[String], nameLike: Option[String], nameUnlike: Option[String], source: String)
GET           /data/table/:tableId/values                          org.hatdex.hat.api.controllers.Data.getTableValues(tableId: Int, limit: Option[Int], starttime: Option[Long], endtime: Option[Long], pretty: Option[Boolean])

POST          /data/field                                          org.hatdex.hat.api.controllers.Data.createField
GET           /data/field/:fieldId                                 org.hatdex.hat.api.controllers.Data.getField(fieldId: Int)
GET           /data/field/:fieldId/values                          org.hatdex.hat.api.controllers.Data.getFieldValues(fieldId: Int)

POST          /data/record                                         org.hatdex.hat.api.controllers.Data.createRecord
POST          /data/record/values                                  org.hatdex.hat.api.controllers.Data.createRecordValues
GET           /data/record/:recordId/values                        org.hatdex.hat.api.controllers.Data.getRecordValues(recordId: Int)
POST          /data/record/:recordId/values                        org.hatdex.hat.api.controllers.Data.storeValueList(recordId: Int)

POST          /data/value                                          org.hatdex.hat.api.controllers.Data.createValue

DELETE        /data/value/:valueId                                 org.hatdex.hat.api.controllers.Data.deleteDataValue(valueId: Int)
DELETE        /data/field/:fieldId                                 org.hatdex.hat.api.controllers.Data.deleteDataField(fieldId: Int)
DELETE        /data/table/:tableId                                 org.hatdex.hat.api.controllers.Data.deleteDataTable(tableId: Int)
DELETE        /data/record/:recordId                               org.hatdex.hat.api.controllers.Data.deleteDataRecord(recordId: Int)

# DATA DEBIT routes

GET           /dataDebit                                           org.hatdex.hat.api.controllers.DataDebitController.listDataDebits()
POST          /dataDebit/propose                                   org.hatdex.hat.api.controllers.DataDebitController.proposeDataDebit
GET           /dataDebit/:dataDebitKey                             org.hatdex.hat.api.controllers.DataDebitController.getDataDebit(dataDebitKey: java.util.UUID)
PUT           /dataDebit/:dataDebitKey/enable                      org.hatdex.hat.api.controllers.DataDebitController.enableDataDebit(dataDebitKey: java.util.UUID)
PUT           /dataDebit/:dataDebitKey/disable                     org.hatdex.hat.api.controllers.DataDebitController.disableDataDebit(dataDebitKey: java.util.UUID)
PUT           /dataDebit/:dataDebitKey/roll                        org.hatdex.hat.api.controllers.DataDebitController.rollDataDebitApi(dataDebitKey: java.util.UUID)
GET           /dataDebit/:dataDebitKey/values                      org.hatdex.hat.api.controllers.DataDebitController.retrieveDataDebitValues(dataDebitKey: java.util.UUID, limit: Option[Int], starttime: Option[Long], endtime: Option[Long], pretty: Option[Boolean])

# SYSTEM routes
GET           /system/update                                       org.hatdex.hat.api.controllers.SystemStatus.update()
GET           /api/v2/system/status                                org.hatdex.hat.api.controllers.SystemStatus.status()

# PHATA routes
GET           /assets/*file                                        @controllers.Assets.versioned(path="/public", file: Asset)
GET           /hatlogin                                            org.hatdex.hat.phata.controllers.Phata.hatLogin(name: String, redirect: String)
GET           /                                                    org.hatdex.hat.phata.controllers.Phata.rumpelIndex
GET           /api/profile                                         org.hatdex.hat.phata.controllers.Phata.profile
GET           /api/notables                                        org.hatdex.hat.phata.controllers.Phata.notables(id: Option[Int])

# FILE routes
POST          /api/v2/files/upload                                 org.hatdex.hat.api.controllers.Files.startUpload
POST          /api/v2/files/search                                 org.hatdex.hat.api.controllers.Files.listFiles()
PUT           /api/v2/files/file/:fileId/complete                  org.hatdex.hat.api.controllers.Files.completeUpload(fileId)
GET           /api/v2/files/file/:fileId                           org.hatdex.hat.api.controllers.Files.getDetail(fileId)
PUT           /api/v2/files/file/:fileId                           org.hatdex.hat.api.controllers.Files.updateFile(fileId)
DELETE        /api/v2/files/file/:fileId                           org.hatdex.hat.api.controllers.Files.deleteFile(fileId)
GET           /api/v2/files/content/:fileId                        org.hatdex.hat.api.controllers.Files.getContent(fileId)

# FILE permissions
POST          /api/v2/files/allowAccess/:userId                    org.hatdex.hat.api.controllers.Files.allowAccessPattern(userId: java.util.UUID, content: Boolean)
POST          /api/v2/files/restrictAccess/:userId                 org.hatdex.hat.api.controllers.Files.restrictAccessPattern(userId: java.util.UUID)
GET           /api/v2/files/allowAccess/:fileId/:userId            org.hatdex.hat.api.controllers.Files.allowAccess(fileId, userId: java.util.UUID, content: Boolean)
GET           /api/v2/files/restrictAccess/:fileId/:userId         org.hatdex.hat.api.controllers.Files.restrictAccess(fileId, userId: java.util.UUID)
GET           /api/v2/files/allowAccessPublic/:fileId              org.hatdex.hat.api.controllers.Files.changePublicAccess(fileId, public: Boolean = true)
GET           /api/v2/files/restrictAccessPublic/:fileId           org.hatdex.hat.api.controllers.Files.changePublicAccess(fileId, public: Boolean = true)

# RICH DATA routes

POST          /api/v2/combinator/$combinator<[0-9a-z-/]+>                                           org.hatdex.hat.api.controllers.RichData.registerCombinator(combinator)
GET           /api/v2/combinator/$combinator<[0-9a-z-/]+>                                           org.hatdex.hat.api.controllers.RichData.getCombinatorData(combinator, recordId: Option[java.util.UUID], orderBy: Option[String], ordering: Option[String], skip: Option[Int], take: Option[Int])
GET           /api/v2/data/$namespace<[0-9a-z-]+>/$endpoint<[0-9a-z-/]+>                            org.hatdex.hat.api.controllers.RichData.getEndpointData(namespace, endpoint, recordId: Option[java.util.UUID], orderBy: Option[String], ordering: Option[String], skip: Option[Int], take: Option[Int])
POST          /api/v2/data/$namespace<[0-9a-z-]+>/$endpoint<[0-9a-z-/]+>                            org.hatdex.hat.api.controllers.RichData.saveEndpointData(namespace, endpoint)
PUT           /api/v2/data                                                                          org.hatdex.hat.api.controllers.RichData.updateRecords()
DELETE        /api/v2/data                                                                          org.hatdex.hat.api.controllers.RichData.deleteDataRecords(records: Seq[java.util.UUID])
POST          /api/v2/data-link                                                                     org.hatdex.hat.api.controllers.RichData.linkDataRecords(records: Seq[java.util.UUID])
POST          /api/v2/data-batch                                                                    org.hatdex.hat.api.controllers.RichData.saveBatchData
POST          /api/v2/data-bundle/$bundleId<[0-9a-zA-Z-]+>                                          org.hatdex.hat.api.controllers.RichData.registerBundle(bundleId)
GET           /api/v2/data-bundle/$bundleId<[0-9a-zA-Z-]+>                                          org.hatdex.hat.api.controllers.RichData.fetchBundle(bundleId)

GET           /api/v2/data-debit/$dataDebitId<[0-9a-zA-Z-]+>                                        org.hatdex.hat.api.controllers.RichData.getDataDebit(dataDebitId: String)
GET           /api/v2/data-debit/$dataDebitId<[0-9a-zA-Z-]+>/values                                 org.hatdex.hat.api.controllers.RichData.getDataDebitValues(dataDebitId: String)
GET           /api/v2/data-debit                                                                    org.hatdex.hat.api.controllers.RichData.listDataDebits()
GET           /api/v2/data-debit/$dataDebitId<[0-9a-zA-Z-]+>/enable/$bundleId<[0-9a-zA-Z-]+>        org.hatdex.hat.api.controllers.RichData.enableDataDebit(dataDebitId, bundleId)
GET           /api/v2/data-debit/$dataDebitId<[0-9a-zA-Z-]+>/disable                                org.hatdex.hat.api.controllers.RichData.disableDataDebit(dataDebitId)
POST          /api/v2/data-debit/$dataDebitId<[0-9a-zA-Z-]+>                                        org.hatdex.hat.api.controllers.RichData.registerDataDebit(dataDebitId)
PUT           /api/v2/data-debit/$dataDebitId<[0-9a-zA-Z-]+>                                        org.hatdex.hat.api.controllers.RichData.updateDataDebit(dataDebitId)

# AUTHENTICATION routes

GET           /control/v2/auth/hatlogin                            org.hatdex.hat.api.controllers.Authentication.hatLogin(name: String, redirect: String)
POST          /control/v2/auth/password                            org.hatdex.hat.api.controllers.Authentication.passwordChangeProcess
POST          /control/v2/auth/passwordReset                       org.hatdex.hat.api.controllers.Authentication.handleForgotPassword
POST          /control/v2/auth/passwordreset/confirm/:token        org.hatdex.hat.api.controllers.Authentication.handleResetPassword(token: String)
